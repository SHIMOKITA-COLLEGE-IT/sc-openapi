/*
 * main
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Group - `Committee`, `Club`
type Group struct {

	// Airtable's Record ID
	Id *interface{} `json:"id"`

	Type *interface{} `json:"type"`

	DisplayName *interface{} `json:"displayName"`

	CreatedAt *interface{} `json:"createdAt,omitempty"`

	ArchivedAt *interface{} `json:"archivedAt,omitempty"`

	Emoji *interface{} `json:"emoji,omitempty"`

	Title *interface{} `json:"title,omitempty"`

	// Markdown
	Description *interface{} `json:"description,omitempty"`

	SlackChannel *interface{} `json:"slackChannel,omitempty"`

	PhotoUrls *interface{} `json:"photoUrls,omitempty"`
}

// AssertGroupRequired checks if the required fields are not zero-ed
func AssertGroupRequired(obj Group) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"type": obj.Type,
		"displayName": obj.DisplayName,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseGroupRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Group (e.g. [][]Group), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseGroupRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGroup, ok := obj.(Group)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertGroupRequired(aGroup)
	})
}
