/*
 * main
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type SocialBrand struct {

	// Airtable's Record ID
	Id *interface{} `json:"id"`

	Name *interface{} `json:"name"`

	SvgIconUrl *interface{} `json:"svgIconUrl,omitempty"`

	UrlPrefix *interface{} `json:"urlPrefix,omitempty"`

	FormPrefix *interface{} `json:"formPrefix,omitempty"`
}

// AssertSocialBrandRequired checks if the required fields are not zero-ed
func AssertSocialBrandRequired(obj SocialBrand) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseSocialBrandRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SocialBrand (e.g. [][]SocialBrand), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSocialBrandRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSocialBrand, ok := obj.(SocialBrand)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSocialBrandRequired(aSocialBrand)
	})
}
