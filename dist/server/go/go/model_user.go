/*
 * main
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type User struct {

	// Airtable's Record ID
	Id string `json:"id"`

	Email string `json:"email"`

	Role Role `json:"role"`

	I18n []UserI18n `json:"i18n"`

	ImageUrl string `json:"imageUrl,omitempty"`

	Pronoun Pronoun `json:"pronoun,omitempty"`

	Birthday string `json:"birthday,omitempty"`

	HideAge bool `json:"hideAge,omitempty"`

	SocialLinks []UserSocialLink `json:"socialLinks,omitempty"`

	RoomNumber float32 `json:"roomNumber,omitempty"`

	PostNumber float32 `json:"postNumber,omitempty"`

	SelfIntroductionSlideUrl string `json:"selfIntroductionSlideUrl,omitempty"`

	Programs []Generation `json:"programs,omitempty"`

	Houses []Generation `json:"houses,omitempty"`

	Committees []UserGroupBelonging `json:"committees,omitempty"`

	Clubs []UserGroupBelonging `json:"clubs,omitempty"`

	// 肩書き
	Position string `json:"position,omitempty"`

	// Markdown
	Bio string `json:"bio,omitempty"`

	PhotoUrls []string `json:"photoUrls,omitempty"`

	LastModifiedAt string `json:"lastModifiedAt,omitempty"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"email": obj.Email,
		"role": obj.Role,
		"i18n": obj.I18n,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.I18n {
		if err := AssertUserI18nRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SocialLinks {
		if err := AssertUserSocialLinkRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Programs {
		if err := AssertGenerationRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Houses {
		if err := AssertGenerationRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Committees {
		if err := AssertUserGroupBelongingRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Clubs {
		if err := AssertUserGroupBelongingRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseUserRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of User (e.g. [][]User), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUser, ok := obj.(User)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserRequired(aUser)
	})
}
