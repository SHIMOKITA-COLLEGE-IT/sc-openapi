/*
 * main
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type User struct {

	// Airtable's Record ID
	Id *interface{} `json:"id"`

	Email *interface{} `json:"email"`

	Role *interface{} `json:"role"`

	I18n *interface{} `json:"i18n"`

	ImageUrl *interface{} `json:"imageUrl,omitempty"`

	Pronoun *interface{} `json:"pronoun,omitempty"`

	Birthday *interface{} `json:"birthday,omitempty"`

	HideAge *interface{} `json:"hideAge,omitempty"`

	SocialLinks *interface{} `json:"socialLinks,omitempty"`

	RoomNumber *interface{} `json:"roomNumber,omitempty"`

	PostNumber *interface{} `json:"postNumber,omitempty"`

	SelfIntroductionSlideUrl *interface{} `json:"selfIntroductionSlideUrl,omitempty"`

	Programs *interface{} `json:"programs,omitempty"`

	Houses *interface{} `json:"houses,omitempty"`

	Committees *interface{} `json:"committees,omitempty"`

	Clubs *interface{} `json:"clubs,omitempty"`

	// 肩書き
	Position *interface{} `json:"position,omitempty"`

	// Markdown
	Bio *interface{} `json:"bio,omitempty"`

	PhotoUrls *interface{} `json:"photoUrls,omitempty"`

	LastModifiedAt *interface{} `json:"lastModifiedAt,omitempty"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"email": obj.Email,
		"role": obj.Role,
		"i18n": obj.I18n,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseUserRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of User (e.g. [][]User), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUser, ok := obj.(User)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserRequired(aUser)
	})
}
