/*
 * main
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"GetGenerations",
			strings.ToUpper("Get"),
			"/mocks/college-app/college-app/406762/generations",
			c.GetGenerations,
		},
		{
			"GetGenerationsRecordId",
			strings.ToUpper("Get"),
			"/mocks/college-app/college-app/406762/generations/{recordId}",
			c.GetGenerationsRecordId,
		},
		{
			"GetGroups",
			strings.ToUpper("Get"),
			"/mocks/college-app/college-app/406762/groups",
			c.GetGroups,
		},
		{
			"GetGroupsRecordId",
			strings.ToUpper("Get"),
			"/mocks/college-app/college-app/406762/groups/{recordId}",
			c.GetGroupsRecordId,
		},
		{
			"GetSocialBrands",
			strings.ToUpper("Get"),
			"/mocks/college-app/college-app/406762/social-brands",
			c.GetSocialBrands,
		},
		{
			"GetUsers",
			strings.ToUpper("Get"),
			"/mocks/college-app/college-app/406762/users",
			c.GetUsers,
		},
		{
			"GetUsersRecordId",
			strings.ToUpper("Get"),
			"/mocks/college-app/college-app/406762/users/{recordId}",
			c.GetUsersRecordId,
		},
		{
			"GetUsersSearch",
			strings.ToUpper("Get"),
			"/mocks/college-app/college-app/406762/users/search",
			c.GetUsersSearch,
		},
		{
			"PostLogin",
			strings.ToUpper("Post"),
			"/mocks/college-app/college-app/406762/login",
			c.PostLogin,
		},
		{
			"PutUsers",
			strings.ToUpper("Put"),
			"/mocks/college-app/college-app/406762/users",
			c.PutUsers,
		},
	}
}

// GetGenerations - Get Generations
func (c *DefaultApiController) GetGenerations(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	type_Param := query.Get("type")
	result, err := c.service.GetGenerations(r.Context(), type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetGenerationsRecordId - Get Generation
func (c *DefaultApiController) GetGenerationsRecordId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recordIdParam := params["recordId"]
	
	result, err := c.service.GetGenerationsRecordId(r.Context(), recordIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetGroups - Get Groups
func (c *DefaultApiController) GetGroups(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	type_Param := query.Get("type")
	result, err := c.service.GetGroups(r.Context(), type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetGroupsRecordId - Get Group
func (c *DefaultApiController) GetGroupsRecordId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recordIdParam := params["recordId"]
	
	result, err := c.service.GetGroupsRecordId(r.Context(), recordIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSocialBrands - Get SocialBrands
func (c *DefaultApiController) GetSocialBrands(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetSocialBrands(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetUsers - Get Users
func (c *DefaultApiController) GetUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetUsers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetUsersRecordId - Get User
func (c *DefaultApiController) GetUsersRecordId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recordIdParam := params["recordId"]
	
	result, err := c.service.GetUsersRecordId(r.Context(), recordIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetUsersSearch - Search Users
func (c *DefaultApiController) GetUsersSearch(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	queryParam := query.Get("query")
	result, err := c.service.GetUsersSearch(r.Context(), queryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostLogin - Login
func (c *DefaultApiController) PostLogin(w http.ResponseWriter, r *http.Request) {
	loginRequestParam := LoginRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginRequestRequired(loginRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostLogin(r.Context(), loginRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PutUsers - Update Me
func (c *DefaultApiController) PutUsers(w http.ResponseWriter, r *http.Request) {
	updateUserRequestParam := UpdateUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateUserRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateUserRequestRequired(updateUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutUsers(r.Context(), updateUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
