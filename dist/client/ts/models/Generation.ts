/* tslint:disable */
/* eslint-disable */
/**
 * main
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * `Program`, `House/Home`
 * @export
 * @interface Generation
 */
export interface Generation {
    /**
     * Airtable's Record ID
     * @type {any}
     * @memberof Generation
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof Generation
     */
    type: GenerationTypeEnum;
    /**
     * 
     * @type {any}
     * @memberof Generation
     */
    displayName: any | null;
    /**
     * 
     * @type {any}
     * @memberof Generation
     */
    from?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Generation
     */
    to?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Generation
     */
    coverImageUrl?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Generation
     */
    title?: any | null;
    /**
     * Markdown
     * @type {any}
     * @memberof Generation
     */
    description?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Generation
     */
    photoUrls?: any | null;
}


/**
 * @export
 */
export const GenerationTypeEnum = {
    Program: 'program',
    House: 'house'
} as const;
export type GenerationTypeEnum = typeof GenerationTypeEnum[keyof typeof GenerationTypeEnum];


/**
 * Check if a given object implements the Generation interface.
 */
export function instanceOfGeneration(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "displayName" in value;

    return isInstance;
}

export function GenerationFromJSON(json: any): Generation {
    return GenerationFromJSONTyped(json, false);
}

export function GenerationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Generation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'displayName': json['displayName'],
        'from': !exists(json, 'from') ? undefined : json['from'],
        'to': !exists(json, 'to') ? undefined : json['to'],
        'coverImageUrl': !exists(json, 'coverImageUrl') ? undefined : json['coverImageUrl'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'photoUrls': !exists(json, 'photoUrls') ? undefined : json['photoUrls'],
    };
}

export function GenerationToJSON(value?: Generation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'displayName': value.displayName,
        'from': value.from,
        'to': value.to,
        'coverImageUrl': value.coverImageUrl,
        'title': value.title,
        'description': value.description,
        'photoUrls': value.photoUrls,
    };
}

