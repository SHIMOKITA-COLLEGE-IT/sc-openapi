/* tslint:disable */
/* eslint-disable */
/**
 * main
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateUserRequestGroupsInner
 */
export interface UpdateUserRequestGroupsInner {
    /**
     * Airtable's Record ID
     * @type {string}
     * @memberof UpdateUserRequestGroupsInner
     */
    groupId: string;
    /**
     * 
     * @type {Date}
     * @memberof UpdateUserRequestGroupsInner
     */
    from?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UpdateUserRequestGroupsInner
     */
    to?: Date;
}

/**
 * Check if a given object implements the UpdateUserRequestGroupsInner interface.
 */
export function instanceOfUpdateUserRequestGroupsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "groupId" in value;

    return isInstance;
}

export function UpdateUserRequestGroupsInnerFromJSON(json: any): UpdateUserRequestGroupsInner {
    return UpdateUserRequestGroupsInnerFromJSONTyped(json, false);
}

export function UpdateUserRequestGroupsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateUserRequestGroupsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groupId': json['groupId'],
        'from': !exists(json, 'from') ? undefined : (new Date(json['from'])),
        'to': !exists(json, 'to') ? undefined : (new Date(json['to'])),
    };
}

export function UpdateUserRequestGroupsInnerToJSON(value?: UpdateUserRequestGroupsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groupId': value.groupId,
        'from': value.from === undefined ? undefined : (value.from.toISOString().substr(0,10)),
        'to': value.to === undefined ? undefined : (value.to.toISOString().substr(0,10)),
    };
}

