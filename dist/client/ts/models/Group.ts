/* tslint:disable */
/* eslint-disable */
/**
 * main
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * `Committee`, `Club`
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * Airtable's Record ID
     * @type {any}
     * @memberof Group
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    type: GroupTypeEnum;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    displayName: any | null;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    createdAt?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    archivedAt?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    emoji?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    title?: any | null;
    /**
     * Markdown
     * @type {any}
     * @memberof Group
     */
    description?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    slackChannel?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    photoUrls?: any | null;
}


/**
 * @export
 */
export const GroupTypeEnum = {
    Committee: 'committee',
    Club: 'club',
    Project: 'project'
} as const;
export type GroupTypeEnum = typeof GroupTypeEnum[keyof typeof GroupTypeEnum];


/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "displayName" in value;

    return isInstance;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'displayName': json['displayName'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'archivedAt': !exists(json, 'archivedAt') ? undefined : json['archivedAt'],
        'emoji': !exists(json, 'emoji') ? undefined : json['emoji'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'slackChannel': !exists(json, 'slackChannel') ? undefined : json['slackChannel'],
        'photoUrls': !exists(json, 'photoUrls') ? undefined : json['photoUrls'],
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'displayName': value.displayName,
        'createdAt': value.createdAt,
        'archivedAt': value.archivedAt,
        'emoji': value.emoji,
        'title': value.title,
        'description': value.description,
        'slackChannel': value.slackChannel,
        'photoUrls': value.photoUrls,
    };
}

