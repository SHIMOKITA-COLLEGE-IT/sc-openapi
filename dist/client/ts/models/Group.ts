/* tslint:disable */
/* eslint-disable */
/**
 * College App API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupType } from './GroupType';
import {
    GroupTypeFromJSON,
    GroupTypeFromJSONTyped,
    GroupTypeToJSON,
} from './GroupType';

/**
 * `Committee`, `Club`のモデル
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * Airtable's Record ID
     * @type {string}
     * @memberof Group
     */
    id: string;
    /**
     * 
     * @type {GroupType}
     * @memberof Group
     */
    type: GroupType;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    displayName: string;
    /**
     * 
     * @type {Date}
     * @memberof Group
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Group
     */
    archivedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    emoji?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    title?: string;
    /**
     * Markdown
     * @type {string}
     * @memberof Group
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    slackChannel?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Group
     */
    photoUrls?: Array<string>;
}

/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "displayName" in value;

    return isInstance;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': GroupTypeFromJSON(json['type']),
        'displayName': json['displayName'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'archivedAt': !exists(json, 'archivedAt') ? undefined : (new Date(json['archivedAt'])),
        'emoji': !exists(json, 'emoji') ? undefined : json['emoji'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'slackChannel': !exists(json, 'slackChannel') ? undefined : json['slackChannel'],
        'photoUrls': !exists(json, 'photoUrls') ? undefined : json['photoUrls'],
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': GroupTypeToJSON(value.type),
        'displayName': value.displayName,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString().substr(0,10)),
        'archivedAt': value.archivedAt === undefined ? undefined : (value.archivedAt.toISOString().substr(0,10)),
        'emoji': value.emoji,
        'title': value.title,
        'description': value.description,
        'slackChannel': value.slackChannel,
        'photoUrls': value.photoUrls,
    };
}

