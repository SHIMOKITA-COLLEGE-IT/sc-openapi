/* tslint:disable */
/* eslint-disable */
/**
 * main
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
} from './Group';

/**
 * 
 * @export
 * @interface UserGroupBelonging
 */
export interface UserGroupBelonging {
    /**
     * 
     * @type {Group}
     * @memberof UserGroupBelonging
     */
    group: Group;
    /**
     * 
     * @type {any}
     * @memberof UserGroupBelonging
     */
    displayName: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserGroupBelonging
     */
    from?: any | null;
    /**
     * 
     * @type {any}
     * @memberof UserGroupBelonging
     */
    to?: any | null;
}

/**
 * Check if a given object implements the UserGroupBelonging interface.
 */
export function instanceOfUserGroupBelonging(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "group" in value;
    isInstance = isInstance && "displayName" in value;

    return isInstance;
}

export function UserGroupBelongingFromJSON(json: any): UserGroupBelonging {
    return UserGroupBelongingFromJSONTyped(json, false);
}

export function UserGroupBelongingFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserGroupBelonging {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'group': GroupFromJSON(json['group']),
        'displayName': json['displayName'],
        'from': !exists(json, 'from') ? undefined : json['from'],
        'to': !exists(json, 'to') ? undefined : json['to'],
    };
}

export function UserGroupBelongingToJSON(value?: UserGroupBelonging | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'group': GroupToJSON(value.group),
        'displayName': value.displayName,
        'from': value.from,
        'to': value.to,
    };
}

