//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct User: Codable, JSONEncodable, Hashable {

    /** Airtable's Record ID */
    public var id: String
    public var email: String
    public var role: Role
    public var i18n: [UserI18n]
    public var imageUrl: String?
    public var pronoun: Pronoun?
    public var birthday: Date?
    public var hideAge: Bool? = false
    public var socialLinks: [UserSocialLink]?
    public var roomNumber: Double?
    public var postNumber: Double?
    public var selfIntroductionSlideUrl: String?
    public var programs: [Generation]?
    public var houses: [Generation]?
    public var committees: [UserGroupBelonging]?
    public var clubs: [UserGroupBelonging]?
    /** 肩書き */
    public var position: String?
    /** Markdown */
    public var bio: String?
    public var photoUrls: [String]?
    public var lastModifiedAt: Date?

    public init(id: String, email: String, role: Role, i18n: [UserI18n], imageUrl: String? = nil, pronoun: Pronoun? = nil, birthday: Date? = nil, hideAge: Bool? = false, socialLinks: [UserSocialLink]? = nil, roomNumber: Double? = nil, postNumber: Double? = nil, selfIntroductionSlideUrl: String? = nil, programs: [Generation]? = nil, houses: [Generation]? = nil, committees: [UserGroupBelonging]? = nil, clubs: [UserGroupBelonging]? = nil, position: String? = nil, bio: String? = nil, photoUrls: [String]? = nil, lastModifiedAt: Date? = nil) {
        self.id = id
        self.email = email
        self.role = role
        self.i18n = i18n
        self.imageUrl = imageUrl
        self.pronoun = pronoun
        self.birthday = birthday
        self.hideAge = hideAge
        self.socialLinks = socialLinks
        self.roomNumber = roomNumber
        self.postNumber = postNumber
        self.selfIntroductionSlideUrl = selfIntroductionSlideUrl
        self.programs = programs
        self.houses = houses
        self.committees = committees
        self.clubs = clubs
        self.position = position
        self.bio = bio
        self.photoUrls = photoUrls
        self.lastModifiedAt = lastModifiedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case role
        case i18n
        case imageUrl
        case pronoun
        case birthday
        case hideAge
        case socialLinks
        case roomNumber
        case postNumber
        case selfIntroductionSlideUrl
        case programs
        case houses
        case committees
        case clubs
        case position
        case bio
        case photoUrls
        case lastModifiedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(email, forKey: .email)
        try container.encode(role, forKey: .role)
        try container.encode(i18n, forKey: .i18n)
        try container.encodeIfPresent(imageUrl, forKey: .imageUrl)
        try container.encodeIfPresent(pronoun, forKey: .pronoun)
        try container.encodeIfPresent(birthday, forKey: .birthday)
        try container.encodeIfPresent(hideAge, forKey: .hideAge)
        try container.encodeIfPresent(socialLinks, forKey: .socialLinks)
        try container.encodeIfPresent(roomNumber, forKey: .roomNumber)
        try container.encodeIfPresent(postNumber, forKey: .postNumber)
        try container.encodeIfPresent(selfIntroductionSlideUrl, forKey: .selfIntroductionSlideUrl)
        try container.encodeIfPresent(programs, forKey: .programs)
        try container.encodeIfPresent(houses, forKey: .houses)
        try container.encodeIfPresent(committees, forKey: .committees)
        try container.encodeIfPresent(clubs, forKey: .clubs)
        try container.encodeIfPresent(position, forKey: .position)
        try container.encodeIfPresent(bio, forKey: .bio)
        try container.encodeIfPresent(photoUrls, forKey: .photoUrls)
        try container.encodeIfPresent(lastModifiedAt, forKey: .lastModifiedAt)
    }
}

