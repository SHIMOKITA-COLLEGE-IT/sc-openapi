//
// Generation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** &#x60;Program&#x60;, &#x60;House/Home&#x60; */
public struct Generation: Codable, JSONEncodable, Hashable {

    public enum ModelType: AnyCodable, Codable, JSONEncodable, CaseIterable {
        case program = program
        case house = house
    }
    /** Airtable's Record ID */
    public var id: AnyCodable?
    public var type: ModelType?
    public var displayName: AnyCodable?
    public var from: AnyCodable?
    public var to: AnyCodable?
    public var coverImageUrl: AnyCodable?
    public var title: AnyCodable?
    /** Markdown */
    public var description: AnyCodable?
    public var photoUrls: AnyCodable?

    public init(id: AnyCodable?, type: ModelType?, displayName: AnyCodable?, from: AnyCodable? = nil, to: AnyCodable? = nil, coverImageUrl: AnyCodable? = nil, title: AnyCodable? = nil, description: AnyCodable? = nil, photoUrls: AnyCodable? = nil) {
        self.id = id
        self.type = type
        self.displayName = displayName
        self.from = from
        self.to = to
        self.coverImageUrl = coverImageUrl
        self.title = title
        self.description = description
        self.photoUrls = photoUrls
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case displayName
        case from
        case to
        case coverImageUrl
        case title
        case description
        case photoUrls
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(type, forKey: .type)
        try container.encode(displayName, forKey: .displayName)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(coverImageUrl, forKey: .coverImageUrl)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(photoUrls, forKey: .photoUrls)
    }
}

