//
// UserI18n.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserI18n: Codable, JSONEncodable, Hashable {

    public var locale: Locale
    public var firstName: String
    public var lastName: String
    public var phoneticFirstName: String?
    public var phoneticLastName: String?
    public var nickName: String?
    public var middleName: String?
    public var phoneticMiddleName: String?
    public var maidenName: String?
    public var _prefix: String?
    public var suffix: String?

    public init(locale: Locale, firstName: String, lastName: String, phoneticFirstName: String? = nil, phoneticLastName: String? = nil, nickName: String? = nil, middleName: String? = nil, phoneticMiddleName: String? = nil, maidenName: String? = nil, _prefix: String? = nil, suffix: String? = nil) {
        self.locale = locale
        self.firstName = firstName
        self.lastName = lastName
        self.phoneticFirstName = phoneticFirstName
        self.phoneticLastName = phoneticLastName
        self.nickName = nickName
        self.middleName = middleName
        self.phoneticMiddleName = phoneticMiddleName
        self.maidenName = maidenName
        self._prefix = _prefix
        self.suffix = suffix
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case locale
        case firstName
        case lastName
        case phoneticFirstName
        case phoneticLastName
        case nickName
        case middleName
        case phoneticMiddleName
        case maidenName
        case _prefix = "prefix"
        case suffix
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(locale, forKey: .locale)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encodeIfPresent(phoneticFirstName, forKey: .phoneticFirstName)
        try container.encodeIfPresent(phoneticLastName, forKey: .phoneticLastName)
        try container.encodeIfPresent(nickName, forKey: .nickName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(phoneticMiddleName, forKey: .phoneticMiddleName)
        try container.encodeIfPresent(maidenName, forKey: .maidenName)
        try container.encodeIfPresent(_prefix, forKey: ._prefix)
        try container.encodeIfPresent(suffix, forKey: .suffix)
    }
}

